package cogcomp;

import me.tongfei.progressbar.ProgressBar;
import me.tongfei.progressbar.ProgressBarStyle;

import java.io.IOException;
import java.io.InputStream;

public class ProgressStream extends InputStream {
    private InputStream in;
    private ProgressBar pb;

    /**
     * ProgressStream implements an extends InputStream while
     * also writing out the read progress on console. ProgressStream
     * can be used as a direct replacement for any InputStream compatible
     * input.
     * @param stream InputStream to be wrapped.
     * @throws IOException For any exception generated by the InputStream.
     */
    public ProgressStream(String msg, ProgressBarStyle style, InputStream stream) throws IOException {
        super();

        // Allocate the reader.
        this.in = stream;

        // Initialize progress bar.
        this.pb = new ProgressBar(msg, stream.available(), style);
        this.pb.start();

    }

    @Override
    public int available() throws IOException {
        return this.in.available();
    }

    @Override
    public void close() throws IOException {
        this.pb.stop();
        this.in.close();
        return;
    }

    @Override
    public int read() throws IOException {
        this.pb.step();
        return this.in.read();
    }

    @Override
    public int read(byte[] toStore) throws IOException {
        this.pb.stepBy(toStore.length); // Update progress bar.
        return this.in.read(toStore);
    }

    @Override
    public int read(byte[] toStore, int off, int len) throws IOException {
        this.pb.stepBy(toStore.length);
        return this.in.read(toStore, off, len);
    }

    @Override
    public long skip(long n) throws IOException {
        this.pb.stepTo(n);
        return this.in.skip(n);
    }

    @Override
    public boolean markSupported() {
        return false;
    }
}